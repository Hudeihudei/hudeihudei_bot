"""
HUDEI HUDEI WOMEN CLUB ‚Äî Telegram Bot
--------------------------------------
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ Render –±–µ–∑ Docker.
–§—É–Ω–∫—Ü–∏–∏:
- /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –º–µ–Ω—é
- /rules ‚Äî –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
- /story ‚Äî –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π
- /unsubscribe ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤–µ—á–µ—Ä–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
- /broadcast ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""

from __future__ import annotations
import os
import logging
import asyncio
import aiosqlite
from datetime import time
from zoneinfo import ZoneInfo
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application, ApplicationBuilder, AIORateLimiter,
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)

logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
log = logging.getLogger("hudei_bot")

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()]
CHANNEL_ID = os.getenv("CHANNEL_ID")
TZ = ZoneInfo("Europe/Vilnius")
DB_PATH = "hudei_bot.sqlite3"

MENU, STORY = range(2)
BTN_SHARE, BTN_RULES, BTN_UNSUB = "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏–µ–π", "–ü—Ä–∞–≤–∏–ª–∞", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"

WELCOME = (
    "üå∑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HUDEI HUDEI WOMEN CLUB!\n\n"
    "–ó–¥–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏ —Ä–∞—Å—Ç–∏ –≤–º–µ—Å—Ç–µ. ‚ú®\n\n"
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:19 –º—ã –ø—É–±–ª–∏–∫—É–µ–º —Ç—ë–ø–ª—ã–π –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç.\n"
    "–ù–∞–∂–º–∏ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏–µ–π' ‚Äî –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ—ë–º –ø—É—Ç–∏. ü¶ã"
)

RULES = (
    "ü§ç –ü—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:\n"
    "1) –ë–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏—è –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.\n"
    "2) –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–º–µ—Å—Ç–æ –∫—Ä–∏—Ç–∏–∫–∏.\n"
    "3) –ë–µ—Ä–µ–∂–Ω–æ—Å—Ç—å –∫ —Å–µ–±–µ –∏ –¥—Ä—É–≥–∏–º.\n"
    "4) –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å: –≤—Å—ë —Å–∫–∞–∑–∞–Ω–Ω–æ–µ ‚Äî –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –∫–ª—É–±–µ.\n"
    "5) –£–≤–∞–∂–µ–Ω–∏–µ –∫ —Ä–∞–∑–Ω—ã–º –∏—Å—Ç–æ—Ä–∏—è–º –∏ —Ç–µ–º–ø–∞–º."

)

CREATE_USERS = """
CREATE TABLE IF NOT EXISTS users (
  user_id INTEGER PRIMARY KEY,
  username TEXT,
  first_name TEXT,
  joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  subscribed INTEGER DEFAULT 1
);
"""
CREATE_STORIES = """
CREATE TABLE IF NOT EXISTS stories (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id INTEGER,
  content TEXT,
  status TEXT DEFAULT 'pending',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
"""

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(CREATE_USERS)
        await db.execute(CREATE_STORIES)
        await db.commit()

async def upsert_user(user_id, username, first_name):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO users(user_id, username, first_name) VALUES(?,?,?) "
            "ON CONFLICT(user_id) DO UPDATE SET username=excluded.username, first_name=excluded.first_name",
            (user_id, username, first_name),
        )
        await db.commit()

async def set_subscribed(user_id, flag):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET subscribed=? WHERE user_id=?", (flag, user_id))
        await db.commit()

async def get_subscribed_users():
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT user_id FROM users WHERE subscribed=1")
        rows = await cur.fetchall()
        return [r[0] for r in rows]

async def add_story(user_id, content):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("INSERT INTO stories(user_id, content) VALUES(?,?)", (user_id, content))
        await db.commit()
        return cur.lastrowid

async def set_story_status(story_id, status):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE stories SET status=? WHERE id=?", (status, story_id))
        await db.commit()

MAIN_KB = ReplyKeyboardMarkup(
    [[KeyboardButton(BTN_SHARE)], [KeyboardButton(BTN_RULES), KeyboardButton(BTN_UNSUB)]],
    resize_keyboard=True,
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    await upsert_user(u.id, u.username, u.first_name)
    await update.message.reply_text(WELCOME, reply_markup=MAIN_KB)
    return MENU

async def rules_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(RULES)

async def story_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üíå –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é (–º–æ–∂–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ, –±–µ–∑ –∏–º—ë–Ω).\n\n"
        "–ß—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å? –ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç? –ß—Ç–æ –±–æ–ª–∏—Ç?\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=ReplyKeyboardRemove(),
    )
    return STORY

async def unsubscribe_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await set_subscribed(update.effective_user.id, 0)
    await update.message.reply_text("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤–µ—á–µ—Ä–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π 19:19. –í–æ–∑–≤—Ä–∞—Ç ‚Äî –∫–æ–º–∞–Ω–¥–æ–π /start", reply_markup=MAIN_KB)

async def menu_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if text == BTN_SHARE:
        return await story_cmd(update, context)
    elif text == BTN_RULES:
        await update.message.reply_text(RULES, reply_markup=MAIN_KB)
    elif text == BTN_UNSUB:
        await unsubscribe_cmd(update, context)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ.", reply_markup=MAIN_KB)
    return MENU

async def receive_story(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    content = update.message.text
    story_id = await add_story(user_id, content)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ. –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. ü¶ã", reply_markup=MAIN_KB)
    if ADMIN_IDS:
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve:{story_id}"), InlineKeyboardButton("‚úñÔ∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{story_id}")]])
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(chat_id=admin_id, text=f"üìù –ù–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è #{story_id} –æ—Ç {user_id}:\n\n{content}", reply_markup=kb)
            except Exception as e:
                log.warning(f"Failed to notify admin {admin_id}: {e}")
    return MENU

async def approve_reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    action, sid = q.data.split(":", 1)
    story_id = int(sid)
    if action == "approve":
        await set_story_status(story_id, "approved")
        await q.edit_message_text(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è #{story_id} ‚Äî –æ–¥–æ–±—Ä–µ–Ω–∞.")
        text = f"üíå –ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–Ω–∏—Ü—ã HUDEI HUDEI:\n\n{q.message.text.split('\\n\\n',1)[1]}"
        if CHANNEL_ID:
            await context.bot.send_message(chat_id=CHANNEL_ID, text=text)
    else:
        await set_story_status(story_id, "rejected")
        await q.edit_message_text(f"‚úñÔ∏è –ò—Å—Ç–æ—Ä–∏—è #{story_id} ‚Äî –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return
    msg = update.message.text.partition(" ")[2].strip()
    if not msg:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        return
    for uid in await get_subscribed_users():
        try:
            await context.bot.send_message(chat_id=uid, text=msg)
        except Exception:
            pass
    await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ")

async def main():
    assert BOT_TOKEN, "‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
    await init_db()
    app = ApplicationBuilder().token(BOT_TOKEN).rate_limiter(AIORateLimiter()).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, menu_router)],
                STORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_story)]},
        fallbacks=[CommandHandler("start", start)]
    )
    app.add_handler(conv)
    app.add_handler(CommandHandler("rules", rules_cmd))
    app.add_handler(CommandHandler("story", story_cmd))
    app.add_handler(CommandHandler("unsubscribe", unsubscribe_cmd))
    app.add_handler(CommandHandler("broadcast", broadcast))
    app.add_handler(CallbackQueryHandler(approve_reject, pattern=r"^(approve|reject):"))
    job_time = time(hour=19, minute=19, tzinfo=TZ)
    app.job_queue.run_daily(job_evening, job_time, name="evening_post")
    log.info("Bot starting‚Ä¶")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    try:
        await asyncio.Event().wait()
    finally:
        await app.updater.stop()
        await app.stop()
        await app.shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        log.info("Bot stopped.")
