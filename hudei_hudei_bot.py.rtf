{\rtf1\ansi\ansicpg1251\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 """\
HUDEI HUDEI WOMEN CLUB \'97 Telegram Bot\
-------------------------------------------------\
\uc0\u1044 \u1086 \u1073 \u1072 \u1074 \u1083 \u1077 \u1085 \u1099  \u1082 \u1086 \u1084 \u1072 \u1085 \u1076 \u1099 :\
- /start \'97 \uc0\u1087 \u1088 \u1080 \u1074 \u1077 \u1090 \u1089 \u1090 \u1074 \u1080 \u1077  \u1080  \u1084 \u1077 \u1085 \u1102 \
- /rules \'97 \uc0\u1087 \u1086 \u1082 \u1072 \u1079 \u1072 \u1090 \u1100  \u1087 \u1088 \u1072 \u1074 \u1080 \u1083 \u1072  \u1089 \u1086 \u1086 \u1073 \u1097 \u1077 \u1089 \u1090 \u1074 \u1072 \
- /story \'97 \uc0\u1086 \u1090 \u1087 \u1088 \u1072 \u1074 \u1080 \u1090 \u1100  \u1083 \u1080 \u1095 \u1085 \u1091 \u1102  \u1080 \u1089 \u1090 \u1086 \u1088 \u1080 \u1102 \
- /unsubscribe \'97 \uc0\u1086 \u1090 \u1087 \u1080 \u1089 \u1082 \u1072  \u1086 \u1090  \u1074 \u1077 \u1095 \u1077 \u1088 \u1085 \u1080 \u1093  \u1089 \u1086 \u1086 \u1073 \u1097 \u1077 \u1085 \u1080 \u1081 \
- /broadcast \'97 \uc0\u1088 \u1072 \u1089 \u1089 \u1099 \u1083 \u1082 \u1072  \u1076 \u1083 \u1103  \u1072 \u1076 \u1084 \u1080 \u1085 \u1080 \u1089 \u1090 \u1088 \u1072 \u1090 \u1086 \u1088 \u1072 \
"""\
from __future__ import annotations\
import os, logging, asyncio, aiosqlite\
from datetime import time\
from zoneinfo import ZoneInfo\
from typing import List, Optional\
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove\
from telegram.constants import ParseMode\
from telegram.ext import Application, ApplicationBuilder, AIORateLimiter, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, ContextTypes, filters\
\
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)\
log = logging.getLogger("hudei_bot")\
\
BOT_TOKEN = os.getenv("BOT_TOKEN")\
ADMIN_IDS: List[int] = [int(x) for x in os.getenv("ADMIN_IDS", "").replace(" ", "").split(",") if x]\
CHANNEL_ID: Optional[str] = os.getenv("CHANNEL_ID")\
TZ = ZoneInfo("Europe/Vilnius")\
DB_PATH = os.getenv("DB_PATH", "hudei_bot.sqlite3")\
\
MENU, STORY = range(2)\
BTN_SHARE, BTN_RULES, BTN_UNSUB = "\uc0\u1055 \u1086 \u1076 \u1077 \u1083 \u1080 \u1090 \u1100 \u1089 \u1103  \u1080 \u1089 \u1090 \u1086 \u1088 \u1080 \u1077 \u1081 ", "\u1055 \u1088 \u1072 \u1074 \u1080 \u1083 \u1072 ", "\u1054 \u1090 \u1087 \u1080 \u1089 \u1072 \u1090 \u1100 \u1089 \u1103 "\
\
WELCOME = (\
    "\uc0\u55356 \u57143  \u1044 \u1086 \u1073 \u1088 \u1086  \u1087 \u1086 \u1078 \u1072 \u1083 \u1086 \u1074 \u1072 \u1090 \u1100  \u1074  HUDEI HUDEI WOMEN CLUB!\\n\\n"\
    "\uc0\u1047 \u1076 \u1077 \u1089 \u1100  \u1073 \u1077 \u1079 \u1086 \u1087 \u1072 \u1089 \u1085 \u1086  \u1076 \u1077 \u1083 \u1080 \u1090 \u1100 \u1089 \u1103 , \u1087 \u1086 \u1076 \u1076 \u1077 \u1088 \u1078 \u1080 \u1074 \u1072 \u1090 \u1100  \u1080  \u1088 \u1072 \u1089 \u1090 \u1080  \u1074 \u1084 \u1077 \u1089 \u1090 \u1077 . \u10024 \\n\\n"\
    "\uc0\u1050 \u1072 \u1078 \u1076 \u1099 \u1081  \u1076 \u1077 \u1085 \u1100  \u1074  19:19 \u1084 \u1099  \u1087 \u1091 \u1073 \u1083 \u1080 \u1082 \u1091 \u1077 \u1084  \u1090 \u1105 \u1087 \u1083 \u1099 \u1081  \u1074 \u1077 \u1095 \u1077 \u1088 \u1085 \u1080 \u1081  \u1087 \u1086 \u1089 \u1090 .\\n"\
    "\uc0\u1053 \u1072 \u1078 \u1084 \u1080  '\u1055 \u1086 \u1076 \u1077 \u1083 \u1080 \u1090 \u1100 \u1089 \u1103  \u1080 \u1089 \u1090 \u1086 \u1088 \u1080 \u1077 \u1081 ' \'97 \u1077 \u1089 \u1083 \u1080  \u1093 \u1086 \u1095 \u1077 \u1096 \u1100  \u1088 \u1072 \u1089 \u1089 \u1082 \u1072 \u1079 \u1072 \u1090 \u1100  \u1086  \u1089 \u1074 \u1086 \u1105 \u1084  \u1087 \u1091 \u1090 \u1080 . \u55358 \u56715 "\
)\
RULES = (\
    "\uc0\u55358 \u56589  \u1055 \u1088 \u1072 \u1074 \u1080 \u1083 \u1072  \u1089 \u1086 \u1086 \u1073 \u1097 \u1077 \u1089 \u1090 \u1074 \u1072 :\\n"\
    "1) \uc0\u1041 \u1077 \u1079  \u1086 \u1089 \u1091 \u1078 \u1076 \u1077 \u1085 \u1080 \u1103  \u1080  \u1089 \u1088 \u1072 \u1074 \u1085 \u1077 \u1085 \u1080 \u1103 .\\n"\
    "2) \uc0\u1055 \u1086 \u1076 \u1076 \u1077 \u1088 \u1078 \u1082 \u1072  \u1074 \u1084 \u1077 \u1089 \u1090 \u1086  \u1082 \u1088 \u1080 \u1090 \u1080 \u1082 \u1080 .\\n"\
    "3) \uc0\u1041 \u1077 \u1088 \u1077 \u1078 \u1085 \u1086 \u1089 \u1090 \u1100  \u1082  \u1089 \u1077 \u1073 \u1077  \u1080  \u1076 \u1088 \u1091 \u1075 \u1080 \u1084 .\\n"\
    "4) \uc0\u1055 \u1088 \u1080 \u1074 \u1072 \u1090 \u1085 \u1086 \u1089 \u1090 \u1100 : \u1074 \u1089 \u1105  \u1089 \u1082 \u1072 \u1079 \u1072 \u1085 \u1085 \u1086 \u1077  \'97 \u1086 \u1089 \u1090 \u1072 \u1105 \u1090 \u1089 \u1103  \u1074  \u1082 \u1083 \u1091 \u1073 \u1077 .\\n"\
    "5) \uc0\u1059 \u1074 \u1072 \u1078 \u1077 \u1085 \u1080 \u1077  \u1082  \u1088 \u1072 \u1079 \u1085 \u1099 \u1084  \u1080 \u1089 \u1090 \u1086 \u1088 \u1080 \u1103 \u1084  \u1080  \u1090 \u1077 \u1084 \u1087 \u1072 \u1084 ."\
)\
EVENING_POST = (\
    "\uc0\u55356 \u57113  *\u1042 \u1077 \u1095 \u1077 \u1088  19:19 \'97 \u1074 \u1088 \u1077 \u1084 \u1103  \u1076 \u1083 \u1103  \u1090 \u1077 \u1073 \u1103 .*\\n\\n"\
    "\uc0\u1057 \u1077 \u1075 \u1086 \u1076 \u1085 \u1103  \u1087 \u1088 \u1086 \u1089 \u1090 \u1086  \u1089 \u1076 \u1077 \u1083 \u1072 \u1081  \u1074 \u1076 \u1086 \u1093  \u1080  \u1089 \u1082 \u1072 \u1078 \u1080  \u1089 \u1077 \u1073 \u1077 : \\n"\
    "_\uc0\u1103  \u1076 \u1086 \u1089 \u1090 \u1072 \u1090 \u1086 \u1095 \u1085 \u1086 , \u1103  \u1085 \u1072  \u1087 \u1091 \u1090 \u1080 , \u1103  \u1085 \u1077  \u1086 \u1076 \u1085 \u1072 _.\\n\\n"\
    "HUDEI HUDEI \uc0\u1088 \u1103 \u1076 \u1086 \u1084 . \u55358 \u56715 "\
)\
\
CREATE_USERS = "CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, username TEXT, first_name TEXT, joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, subscribed INTEGER DEFAULT 1);"\
CREATE_STORIES = "CREATE TABLE IF NOT EXISTS stories (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, content TEXT, status TEXT DEFAULT 'pending', created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);"\
\
async def init_db():\
    async with aiosqlite.connect(DB_PATH) as db:\
        await db.execute(CREATE_USERS)\
        await db.execute(CREATE_STORIES)\
        await db.commit()\
\
async def upsert_user(user_id:int, username:str|None, first_name:str|None):\
    async with aiosqlite.connect(DB_PATH) as db:\
        await db.execute("INSERT INTO users(user_id,username,first_name) VALUES(?,?,?) ON CONFLICT(user_id) DO UPDATE SET username=excluded.username,first_name=excluded.first_name", (user_id,username,first_name))\
        await db.commit()\
\
async def set_subscribed(user_id:int, flag:int):\
    async with aiosqlite.connect(DB_PATH) as db:\
        await db.execute("UPDATE users SET subscribed=? WHERE user_id=?", (flag,user_id))\
        await db.commit()\
\
async def get_subscribed_users()->List[int]:\
    async with aiosqlite.connect(DB_PATH) as db:\
        cur=await db.execute("SELECT user_id FROM users WHERE subscribed=1")\
        rows=await cur.fetchall()\
        return [r[0] for r in rows]\
\
async def add_story(user_id:int, content:str)->int:\
    async with aiosqlite.connect(DB_PATH) as db:\
        cur=await db.execute("INSERT INTO stories(user_id,content) VALUES(?,?)",(user_id,content))\
        await db.commit()\
        return cur.lastrowid\
\
async def set_story_status(story_id:int, status:str):\
    async with aiosqlite.connect(DB_PATH) as db:\
        await db.execute("UPDATE stories SET status=? WHERE id=?",(status,story_id))\
        await db.commit()\
\
MAIN_KB = ReplyKeyboardMarkup([[KeyboardButton(BTN_SHARE)], [KeyboardButton(BTN_RULES), KeyboardButton(BTN_UNSUB)]], resize_keyboard=True)\
\
async def start(update:Update, context:ContextTypes.DEFAULT_TYPE):\
    u=update.effective_user\
    await upsert_user(u.id,u.username,u.first_name)\
    await update.message.reply_text(WELCOME,reply_markup=MAIN_KB)\
    return MENU\
\
async def rules_cmd(update:Update, context:ContextTypes.DEFAULT_TYPE):\
    await update.message.reply_text(RULES)\
\
async def story_cmd(update:Update, context:ContextTypes.DEFAULT_TYPE):\
    await update.message.reply_text("\uc0\u55357 \u56460  \u1053 \u1072 \u1087 \u1080 \u1096 \u1080  \u1089 \u1074 \u1086 \u1102  \u1080 \u1089 \u1090 \u1086 \u1088 \u1080 \u1102  (\u1084 \u1086 \u1078 \u1085 \u1086  \u1072 \u1085 \u1086 \u1085 \u1080 \u1084 \u1085 \u1086 , \u1073 \u1077 \u1079  \u1080 \u1084 \u1105 \u1085 ).\\n\\n\u1063 \u1090 \u1086  \u1090 \u1099  \u1095 \u1091 \u1074 \u1089 \u1090 \u1074 \u1091 \u1077 \u1096 \u1100 ? \u1063 \u1090 \u1086  \u1087 \u1086 \u1084 \u1086 \u1075 \u1072 \u1077 \u1090 ? \u1063 \u1090 \u1086  \u1073 \u1086 \u1083 \u1080 \u1090 ?\\n\\n\u1050 \u1086 \u1075 \u1076 \u1072  \u1079 \u1072 \u1082 \u1086 \u1085 \u1095 \u1080 \u1096 \u1100  \'97 \u1087 \u1088 \u1086 \u1089 \u1090 \u1086  \u1086 \u1090 \u1087 \u1088 \u1072 \u1074 \u1100  \u1089 \u1086 \u1086 \u1073 \u1097 \u1077 \u1085 \u1080 \u1077 \u1084 .", reply_markup=ReplyKeyboardRemove())\
    return STORY\
\
async def unsubscribe_cmd(update:Update, context:ContextTypes.DEFAULT_TYPE):\
    await set_subscribed(update.effective_user.id,0)\
    await update.message.reply_text("\uc0\u1042 \u1099  \u1086 \u1090 \u1087 \u1080 \u1089 \u1072 \u1083 \u1080 \u1089 \u1100  \u1086 \u1090  \u1074 \u1077 \u1095 \u1077 \u1088 \u1085 \u1080 \u1093  \u1089 \u1086 \u1086 \u1073 \u1097 \u1077 \u1085 \u1080 \u1081  19:19. \u1042 \u1086 \u1079 \u1074 \u1088 \u1072 \u1090  \'97 \u1082 \u1086 \u1084 \u1072 \u1085 \u1076 \u1086 \u1081  /start",reply_markup=MAIN_KB)\
\
async def menu_router(update:Update, context:ContextTypes.DEFAULT_TYPE):\
    text=(update.message.text or "").strip()\
    if text==BTN_SHARE:\
        return await story_cmd(update,context)\
    elif text==BTN_RULES:\
        await update.message.reply_text(RULES,reply_markup=MAIN_KB)\
    elif text==BTN_UNSUB:\
        await unsubscribe_cmd(update,context)\
    else:\
        await update.message.reply_text("\uc0\u1042 \u1099 \u1073 \u1077 \u1088 \u1080 \u1090 \u1077  \u1076 \u1077 \u1081 \u1089 \u1090 \u1074 \u1080 \u1077  \u1085 \u1072  \u1082 \u1083 \u1072 \u1074 \u1080 \u1072 \u1090 \u1091 \u1088 \u1077  \u1085 \u1080 \u1078 \u1077 .",reply_markup=MAIN_KB)\
    return MENU\
\
async def receive_story(update:Update, context:ContextTypes.DEFAULT_TYPE):\
    user_id=update.effective_user.id\
    content=update.message.text\
    story_id=await add_story(user_id,content)\
    await update.message.reply_text("\uc0\u1057 \u1087 \u1072 \u1089 \u1080 \u1073 \u1086  \u1079 \u1072  \u1076 \u1086 \u1074 \u1077 \u1088 \u1080 \u1077 . \u1058 \u1074 \u1086 \u1103  \u1080 \u1089 \u1090 \u1086 \u1088 \u1080 \u1103  \u1086 \u1090 \u1087 \u1088 \u1072 \u1074 \u1083 \u1077 \u1085 \u1072  \u1085 \u1072  \u1073 \u1077 \u1088 \u1077 \u1078 \u1085 \u1091 \u1102  \u1084 \u1086 \u1076 \u1077 \u1088 \u1072 \u1094 \u1080 \u1102 . \u55358 \u56715 ",reply_markup=MAIN_KB)\
    if ADMIN_IDS:\
        kb=InlineKeyboardMarkup([[InlineKeyboardButton("\uc0\u9989  \u1054 \u1087 \u1091 \u1073 \u1083 \u1080 \u1082 \u1086 \u1074 \u1072 \u1090 \u1100 ",callback_data=f"approve:\{story_id\}"),InlineKeyboardButton("\u10006 \u65039  \u1054 \u1090 \u1082 \u1083 \u1086 \u1085 \u1080 \u1090 \u1100 ",callback_data=f"reject:\{story_id\}")]])\
        for admin_id in ADMIN_IDS:\
            try:\
                await context.bot.send_message(chat_id=admin_id,text=f"\uc0\u55357 \u56541  \u1053 \u1086 \u1074 \u1072 \u1103  \u1080 \u1089 \u1090 \u1086 \u1088 \u1080 \u1103  #\{story_id\} \u1086 \u1090  \u1087 \u1086 \u1083 \u1100 \u1079 \u1086 \u1074 \u1072 \u1090 \u1077 \u1083 \u1103  \{user_id\}:\\n\\n\{content\}",reply_markup=kb)\
            except Exception as e: log.warning(f"Failed to notify admin \{admin_id\}: \{e\}")\
    return MENU\
\
async def approve_reject(update:Update, context:ContextTypes.DEFAULT_TYPE):\
    q=update.callback_query; await q.answer(); action,sid=q.data.split(":",1); story_id=int(sid)\
    if action=="approve":\
        await set_story_status(story_id,"approved")\
        await q.edit_message_text(f"\uc0\u9989  \u1048 \u1089 \u1090 \u1086 \u1088 \u1080 \u1103  #\{story_id\} \'97 \u1086 \u1076 \u1086 \u1073 \u1088 \u1077 \u1085 \u1072 .")\
        text=f"\uc0\u55357 \u56460  \u1048 \u1089 \u1090 \u1086 \u1088 \u1080 \u1103  \u1091 \u1095 \u1072 \u1089 \u1090 \u1085 \u1080 \u1094 \u1099  HUDEI HUDEI:\\n\\n\{q.message.text.split('\\n\\n',1)[1]\}"\
        if CHANNEL_ID:\
            try: await context.bot.send_message(chat_id=CHANNEL_ID,text=text)\
            except Exception as e: log.error(f"Posting failed: \{e\}")\
        else:\
            for uid in await get_subscribed_users():\
                try: await context.bot.send_message(chat_id=uid,text=text)\
                except Exception: pass\
    else:\
        await set_story_status(story_id,"rejected")\
        await q.edit_message_text(f"\uc0\u10006 \u65039  \u1048 \u1089 \u1090 \u1086 \u1088 \u1080 \u1103  #\{story_id\} \'97 \u1086 \u1090 \u1082 \u1083 \u1086 \u1085 \u1077 \u1085 \u1072 .")\
\
async def broadcast(update:Update, context:ContextTypes.DEFAULT_TYPE):\
    if update.effective_user.id not in ADMIN_IDS: return\
    msg=update.message.text.partition(" ")[2].strip()\
    if not msg: await update.message.reply_text("\uc0\u1048 \u1089 \u1087 \u1086 \u1083 \u1100 \u1079 \u1086 \u1074 \u1072 \u1085 \u1080 \u1077 : /broadcast \u1058 \u1077 \u1082 \u1089 \u1090  \u1089 \u1086 \u1086 \u1073 \u1097 \u1077 \u1085 \u1080 \u1103 "); return\
    ok=0\
    for uid in await get_subscribed_users():\
        try: await context.bot.send_message(chat_id=uid,text=msg); ok+=1\
        except Exception: pass\
    await update.message.reply_text(f"\uc0\u1056 \u1072 \u1089 \u1089 \u1099 \u1083 \u1082 \u1072  \u1086 \u1090 \u1087 \u1088 \u1072 \u1074 \u1083 \u1077 \u1085 \u1072 : \{ok\} \u1091 \u1095 \u1072 \u1089 \u1090 \u1085 \u1080 \u1094 \u1072 \u1084 .")\
\
async def job_evening(context:ContextTypes.DEFAULT_TYPE):\
    for uid in await get_subscribed_users():\
        try: await context.bot.send_message(chat_id=uid,text=EVENING_POST,parse_mode=ParseMode.MARKDOWN)\
        except Exception: pass\
\
async def on_error(update:object, context:ContextTypes.DEFAULT_TYPE):\
    log.error(msg="Exception while handling an update:",exc_info=context.error)\
\
async def main():\
    assert BOT_TOKEN, "Set BOT_TOKEN env var"\
    await init_db()\
    app=(ApplicationBuilder().token(BOT_TOKEN).rate_limiter(AIORateLimiter()).build())\
    conv=ConversationHandler(entry_points=[CommandHandler("start",start)],states=\{MENU:[MessageHandler(filters.TEXT & ~filters.COMMAND,menu_router)],STORY:[MessageHandler(filters.TEXT & ~filters.COMMAND,receive_story)]\},fallbacks=[CommandHandler("start",start)])\
    app.add_handler(conv)\
    app.add_handler(CommandHandler("rules",rules_cmd))\
    app.add_handler(CommandHandler("story",story_cmd))\
    app.add_handler(CommandHandler("unsubscribe",unsubscribe_cmd))\
    app.add_handler(CallbackQueryHandler(approve_reject,pattern=r"^(approve|reject):"))\
    app.add_handler(CommandHandler("broadcast",broadcast))\
    app.add_error_handler(on_error)\
    app.job_queue.run_daily(job_evening,time(hour=19,minute=19,tzinfo=TZ),name="evening_post")\
    log.info("Bot starting\'85")\
    await app.initialize(); await app.start(); await app.updater.start_polling()\
    try: await asyncio.Event().wait()\
    finally:\
        await app.updater.stop(); await app.stop(); await app.shutdown()\
\
if __name__=="__main__":\
    try: asyncio.run(main())\
    except (KeyboardInterrupt,SystemExit): log.info("Bot stopped.")\
}